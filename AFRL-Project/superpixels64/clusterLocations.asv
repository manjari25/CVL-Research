% Last Edit: 12/17/14
% M is a segmentation mask, entries in {1,2,...,K}.
% C is a segmentation mask, entries in {1,2,...,L}.
%
% Compute a segmentation respecting the boundaries in M, clustering points until there
% are no more than p_max pixels in a cluster.
% k-means clustering on (x,y) position is run on each cluster from M.
function [C,centroids] = clusterLocations(M,p_max)
C = zeros(size(M));
K = max(M(:));
c_off=0;
%centroids
centroids = [];
% K = coarse segments, i.e -for each coarse segment
for k_i=1:K
    % xx,yy are locations of kth coarse segments (pixels belonging to kth
    % coarse segment)
  [xx,yy] = find(M==k_i);
  % l_this - Break this superpixel into l_this clusters - theses are fine
  % scale superpixels
  l_this = ceil(length(xx)/p_max);
  if l_this > 1
    [idx,centroid] = kmeans([xx yy],l_this,'start','sample','replicates',10,'emptyaction','singleton'); %make kmeans return the centroids as well indices
    centroids = [centroids;centroid];
  else
    % If l_this is less than 1, no further clustering; superpixel is finescale in itself.  
    fprintf('L_this is 0 (number of clusters is 0)\n');
    idx = ones(size(xx));
  end
  
  % Stuff to Label fine superpixel image
  inds = sub2ind(size(M),xx,yy);
  % Set label of these pixels (in a linear fashion)
  C(inds) = idx + c_off;
  %c_off counts the number of the fine scale superpixel
  c_off = c_off + l_this;
end

% Uniquify just in case clusters were lost in k-means.
Cv = C';
Cv = Cv(:);
uu = unique(Cv);
N_seg = length(uu);
the_map(uu) = 1:N_seg;
Cv = the_map(Cv);
C = reshape(Cv,[size(M,2) size(M,1)])';
